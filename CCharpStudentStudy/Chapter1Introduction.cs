//①←授業の順番

//using命令を使うことで「名前を解決」する
using System;

//8.クラスを分類するための「名前空間」
//CCharpStudentStudyという空間にクラスが含まれている
//CCharpStudentStudy.Chapter1Introductionと表すと「完全修飾名」となるが名前が長い
namespace CCharpStudentStudy
{
    //0.クラスの説明
    //ある特定の処理を集めた設計図
    //{}(ブロックやスコープと言う)で囲むことでプログラムの範囲を構造的に示すことができる
    //クラスのブロック内に含まれる要素を「メンバーと言う」

    /// <summary>
    /// チャプター1 イントロダクション
    /// </summary>
    public class Chapter1Introduction
    {
        /// <summary>
        /// 疑似的なエントリポイント
        /// </summary>
        public void Main()
        {
            //1. 1-1 文字を書き込んで実行してみよう！Method作成
            //WriteTextMethod("未来最高！");

            //5. 1-2 名前を入力してみよう！Method作成
            //InputName();


            //10.コメント
            //単一行コメント
            /*
             * 複数行コメント
             * 何行かにまたいでコメントを書くことができる
             */

            //10.★補足でctrl+K,ctrl+cのコメント技を教えて
            //複数行コメントより単一行のほうが使いやすいことを教えとく
            //元合ったプログラムをコメントにすることを「コメントアウト」という

            //11.ドキュメンテーションコメント
            // ///<summary>~/// </summary>で囲んで
            //関数やクラスを日本語で補足を書くことができる
            
            //12.一番最初にhelloworldを書いてもらった時の説明
            //C#9.0からのトップレベルステートメント
            //Program.cs内のエントリポイントを毎回書くのは面倒なので省略できるようになった
            //トップレベルステートメントの制約
            //1 プロジェクトで1ファイルのみ
            //2 MainMethod月のクラスとも併用できない(エントリポイントがかぶってはいけない)
            //3 名前・クラスの宣言より前に記述しなければならない

            //13.デバッグ,ビルドの説明
            //ビルドタブ→ソリューションをビルドで下の出力にログが出る
            //デバッグ→デバッグの開始
            //デバッグ→デバッグなしの開始(リリース、実際と同じような流れで処理を実行するくらいに説明をとどめる)
            //ブレイクポイントとステップの説明
        }

        /// <summary>
        /// 2.「メソッド」クラスの機能を提供する（処理の塊）、渡された文字列を表示する
        /// </summary>
        private void WriteTextLine(string text)
        {
            //3.命令文、単に文と呼ばれることもある
            Console.WriteLine(text);    //4.コンソール画面に書き込まれた文字列を表示する文
        }

        /// <summary>
        /// 名前を入力して表示する処理
        /// </summary>
        private void InputName()
        {
            //6.セミコロン(;)で区切られていれば空白や改行が可能 補足で
            //キーワードや変数等プログラム側で登録されてる文字列を区切る
            //とエラーが出ることを教えとく
            WriteTextLine(
                "名前を入力してみよう！"
                )
                ;

            //9.こんなクラス名だけの名前を単純名という
            string? name = Console.ReadLine();

            //7.★補足 ブレースホルダー（$"{変数}"）を使うことで文字列リテラル内に
            //変数を埋め込むことができる
            Console.WriteLine($"こんにちは{name}!!");
        }
    }
}
